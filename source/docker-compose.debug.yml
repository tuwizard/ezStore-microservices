version: '3.4'
# If you want to debug a container, un-comment block of service
# Run command: docker-compose -f docker-compose.debug.yml --build
# Run F5 with configuration in launch.json

services:
  ezstore.microservice.product.api:
    image: ezstore/product-api:dev
    container_name: ezstore.product.api
    build:
      target: base
      context: 03.ezStore/Product/ezStore.Microservice.Product.API
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_USE_POLLING_FILE_WATCHER=1
    ports:
      - "80"
    volumes:
      - ./03.ezStore/Product/ezStore.Microservice.Product.API/bin/Debug/netcoreapp2.1/publish:/app
    entrypoint: tail -f /dev/null

  # microservice.identityserver:
  #   image: microservice/identity-server:dev
  #   container_name: microservice.identityserver
  #   build:
  #     target: base
  #     context: 02.Core Services/Member/Microservice.IdentityServer
  #     dockerfile: Dockerfile
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     - DOTNET_USE_POLLING_FILE_WATCHER=1
  #   ports:
  #     - "80"
  #   volumes:
  #     - ./02.Core Services/Member/Microservice.IdentityServer/bin/Debug/netcoreapp2.1/publish:/app
  #   entrypoint: tail -f /dev/null

  # microservice.logging.api:
  #   image: microservice/logging-api:dev
  #   container_name: microservice.logging.api
  #   build:
  #     target: base
  #     context: 02.Core Services/Logging/Microservice.Logging.API
  #     dockerfile: Dockerfile
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     - DOTNET_USE_POLLING_FILE_WATCHER=1
  #   ports:
  #     - "80"
  #   volumes:
  #     - ./02.Core Services/Logging/Microservice.Logging.API/bin/Debug/netcoreapp2.1/publish:/app
  #   entrypoint: tail -f /dev/null

  # microservice.logging.backgroundprocess:
  #   image: microservice/logging-background:dev
  #   container_name: microservice.logging.background
  #   build:
  #     target: base
  #     context: 02.Core Services/Logging/Microservice.Logging.BackgroundProcess
  #     dockerfile: Dockerfile
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     - DOTNET_USE_POLLING_FILE_WATCHER=1
  #   ports:
  #     - "80"
  #   volumes:
  #     - ./02.Core Services/Logging/Microservice.Logging.BackgroundProcess/bin/Debug/netcoreapp2.1/publish:/app
  #   entrypoint: tail -f /dev/null

  # microservice.notification.backgroundprocess:
  #   image: microservice/notification-background:dev
  #   container_name: microservice.notification.background
  #   build:
  #     target: base
  #     context: 02.Core Services/Notification/Microservice.Notification.BackgroundProcess
  #     dockerfile: Dockerfile
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     - DOTNET_USE_POLLING_FILE_WATCHER=1
  #   ports:
  #     - "80"
  #   dns:
  #     - 8.8.8.8
  #   volumes:
  #     - ./02.Core Services/Notification/Microservice.Notification.BackgroundProcess/bin/Debug/netcoreapp2.1/publish:/app
  #   entrypoint: tail -f /dev/null
